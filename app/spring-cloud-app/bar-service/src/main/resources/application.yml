server:
  port: 0 # will be set automatically
  #port: 8081

spring:
  # Имя сервиса, по которому Config Server найдет конфигурацию
  application.name: bar-service
  # Явно указываем, что хотим использовать Config Server
  config.import: 'optional:configserver:'
  cloud:
    config:
      discovery:
        enabled: true # Включить обнаружение Config Server через Eureka
        service-id: config-server # Имя Config Server в Eureka
        #uri: http://localhost:8888 # Если не используете Eureka для Config Server
      # Говорит для каких профилей нужны настройки
      profile: rabbit,prod
    function:
      definition: processFooEventFromRabbitMQ;processFooEventFromKafka
    stream:
      bindings:
        # Имя бина-потребителя (Consumer) + -in-0 (по умолчанию для входящих)
        processFooEventFromRabbitMQ-in-0:
          destination: foo-events
          group: foo-processing-group
          content-type: application/json
          binder: rabbit
        processFooEventFromKafka-in-0:
          destination: foo-events
          group: foo-processing-group
          content-type: application/json
          binder: kafka
          consumer:
            use-native-decoding: false  # Важно!
      binders:
        rabbit:
          type: rabbit
          environment:
            spring:
              rabbitmq:
                consumer:
                  binding-routing-key: "foo.*"
                  exchange-type: topic
                  auto-bind-dlq: true
                  republish-to-dlq: true
                  concurrency: 5 # количество параллельных consumer'ов
                  max-attempts: 3
        kafka:
          type: kafka
          environment:
            spring:
              kafka:
                bootstrap-servers: localhost:9092
                consumer:
                  auto-offset-reset: earliest
eureka:
  instance:
    #hostname: localhost
    # чтобы каждый экземпляр имел уникальный идентификатор
    instance-id: ${spring.application.name}:${random.value}
  client:
    serviceUrl:
      # in local dev environment
      defaultZone: http://localhost:8761/eureka
      # in prod environment
      #defaultZone: http://eureka-server-1.yourdomain.com:8761/eureka/,http://eureka-server-2.yourdomain.com:8761/eureka/

management:
  endpoints.web.exposure.include: '*'
  endpoint.health.show-details: always

logging:
  level:
    # Базовый уровень для всего приложения
    root: INFO
    by.duzh: DEBUG
    org.springframework.cloud.stream.messaging: DEBUG
    org.springframework.boot.actuate: DEBUG
    org.springframework.web: DEBUG
    com.netflix.eureka: DEBUG # Установить уровень DEBUG для логирования Eureka Client
    com.netflix.discovery: DEBUG # Установить уровень DEBUG для логирования Discovery
    org.springframework.cloud.netflix.eureka: DEBUG # Для специфичных логов Spring Cloud Netflix Eureka
    #org.springframework.cloud: DEBUG # Можно включить, если нужно больше логов от Spring Cloud в целом
