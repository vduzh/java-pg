#
# Все остальные локальные настройки, которые не зависят от Config Server, также могут быть здесь.
#
server.port: 0 # will be set automatically

spring:
  # Имя сервиса, по которому Config Server найдет конфигурацию
  application.name: foo-service
  # Явно указываем, что хотим использовать Config Server
  config.import: 'optional:configserver:'
  cloud:
    config:
      discovery:
        enabled: true # Включить обнаружение Config Server через Eureka
        service-id: config-server # Имя Config Server в Eureka
        #uri: http://localhost:8888 # Если не используете Eureka для Config Server
      # Говорит для каких профилей нужны настройки
      profile: prod
    function:
      definition: sendFooEventToRabbitMQ;sendFooEventToKafka
    stream:
      bindings:
        # Functional binding name for RabbitMQ
        sendFooEventToRabbitMQ-out-0:
          # maps to the 'foo-events' RabbitMQ exchange
          destination: foo-events # RabbitMQ exchange name, куда будут отправляться сообщения
          content-type: application/json
          binder: rabbit
        # Functional binding name for Kafka
        sendFooEventToKafka-out-0: # Имя функции в продюсере
          destination: foo-events # Имя топика Kafka
          content-type: application/json
          binder: kafka
        # Explicit binding name for RabbitMQ
        fooEventToRabbitMQOut:
          destination: foo-events
          content-type: application/json
          binder: rabbit
        # Explicit binding name for Kafka
        fooEventToKafkaOut:
          destination: foo-events
          content-type: application/json
          binder: kafka
      binders:
        rabbit:
          type: rabbit
          environment:
            spring:
              rabbitmq:
                producer:
                  # Или можно использовать fixed-routing-key: my.specific.key
                  # Или другое выражение для определения routing key
                  routing-key-expression: 'headers["routingKey"]'
                  exchange-type: topic
        kafka:
          type: kafka
          environment:
            spring:
              kafka:
                bootstrap-servers: localhost:9092
                # Настройки для Producer
                producer:
                  configuration:
                    key-serializer: org.apache.kafka.common.serialization.StringSerializer
                    # Используем JSON для сериализации сообщений
                    value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
                    # Для надежности можно включить ack
                    # acks: all

eureka:
  #hostname: localhost
  # чтобы каждый экземпляр имел уникальный идентификатор
  instance:
    instance-id: ${spring.application.name}:${random.value}
  client:
    serviceUrl:
      # In prod environment
      #defaultZone: http://eureka-server-1.yourdomain.com:8761/eureka/,http://eureka-server-2.yourdomain.com:8761/eureka/
      defaultZone: http://localhost:8761/eureka # in local dev environment

management:
  endpoints.web.exposure.include: '*'
  endpoint.health.show-details: always

logging:
  level:
    root: INFO # Базовый уровень для всего приложения
    by.duzh: DEBUG
    org.springframework.cloud.stream.messaging: DEBUG
    org.springframework.boot.actuate: DEBUG
    org.springframework.web: DEBUG
    com.netflix.eureka: DEBUG # Установить уровень DEBUG для логирования Eureka Client
    com.netflix.discovery: DEBUG # Установить уровень DEBUG для логирования Discovery
    org.springframework.cloud.netflix.eureka: DEBUG # Для специфичных логов Spring Cloud Netflix Eureka
    # org.springframework.cloud: DEBUG # Можно включить, если нужно больше логов от Spring Cloud в целом
