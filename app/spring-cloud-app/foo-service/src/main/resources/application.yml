spring:
  application:
    # Имя сервиса, по которому Config Server найдет конфигурацию
    name: foo-service
  config:
    # Явно указываем, что хотим использовать Config Server
    import: 'optional:configserver:'
  cloud:
    config:
      discovery:
        enabled: true # Включить обнаружение Config Server через Eureka
        service-id: github-config-server # Имя Config Server в Eureka
        #uri: http://localhost:8888 # Если не используете Eureka для Config Server
      #profile: dev # Активный профиль (dev, prod и т.д.)
      profile: prod

#
# Все остальные локальные настройки, которые не зависят от Config Server, также могут быть здесь.
#
server:
  port: 0 # will be set automatically
  #port: 8080

eureka:
  instance:
    #hostname: localhost
    # чтобы каждый экземпляр имел уникальный идентификатор
    instance-id: ${spring.application.name}:${random.value}
  client:
    serviceUrl:
      # in local dev environment
      defaultZone: http://localhost:8761/eureka
      # in prod environment
      #defaultZone: http://eureka-server-1.yourdomain.com:8761/eureka/,http://eureka-server-2.yourdomain.com:8761/eureka/

management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: always

logging:
  level:
    root: INFO # Базовый уровень для всего приложения
    org.springframework.boot.actuate: DEBUG
    org.springframework.web: DEBUG
    com.netflix.eureka: DEBUG # Установить уровень DEBUG для логирования Eureka Client
    com.netflix.discovery: DEBUG # Установить уровень DEBUG для логирования Discovery
    org.springframework.cloud.netflix.eureka: DEBUG # Для специфичных логов Spring Cloud Netflix Eureka
    # org.springframework.cloud: DEBUG # Можно включить, если нужно больше логов от Spring Cloud в целом
